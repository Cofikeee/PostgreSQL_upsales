---------------------------------------------------------------
-- Скрипт для создания таблицы managers и наполнения ее данными.

DROP TABLE IF EXISTS managers;
DROP TABLE IF EXISTS upsale;

CREATE TABLE managers
(
    id SERIAL   PRIMARY KEY,
    login       VARCHAR(60),
    name        VARCHAR(200),
    office      INTEGER
);

INSERT INTO managers(login, name, office) VALUES

('hemp','Hemp A',4),
('jool','Jolly A',5),
('hobert','Hobert F',5),
('frankjr','Gotty F',7),
('aleensr','Allen D',1),
('goofy','Goofy M',8),
('duckduck','Muddy W',8);

-------------------------------------------------------------
-- Скрипт для создания таблицы upsale и наполнения ее данными.

CREATE TABLE upsale
(
    id SERIAL   PRIMARY KEY,
    dt          VARCHAR(60),
    manager_id  VARCHAR(200),
    client_id   INTEGER,
    call_id     INTEGER,
    factor_id   INTEGER,
    result      BOOLEAN
);

INSERT INTO upsale(dt, manager_id, client_id, call_id, factor_id, result) VALUES

('01.02.2017',7,123,3,2,'no'),
('03.02.2017',7,90,9,1,'yes'),
('02.02.2017',5,678,5,4,'yes'),
('04.02.2017',5,734,12,2,'yes'),
('02.02.2017',4,890,6,2,'no'),
('01.02.2017',3,67,2,1,'no'),
('04.02.2017',3,678,11,5,'yes'),
('03.02.2017',2,123,7,3,'yes'),
('03.02.2017',2,45,8,2,'no'),
('01.02.2017',1,45,1,1,'yes'),
('01.02.2017',1,45,4,4,'no'),
('04.02.2017',1,893,10,4,'yes');

COMMIT;

-------------------------------------------------------------------------------
-- 1. Отобразить сколько предложений сделал каждый из менеджеров за всю историю.

SELECT mn.name, COUNT(u.id) AS upsale_total
  FROM upsale AS u
       FULL JOIN managers AS mn ON mn.id = CAST(u.manager_id AS INTEGER)
 GROUP BY mn.name
 ORDER BY upsale_total DESC;
 
 -----------------------------------------------------------------------------------------------
 -- 2. Отобразить конверсию предложений в подключения для менеджеров за указанный период времени.
 -- Убрал ненужные CTE, убрал JOIN с таблицей менеджеров (менеджера с 0 звонков), сократил на 21 строку.
 
DROP TABLE IF EXISTS date_range;
  
CREATE TABLE date_range(date_min DATE,
                        date_max DATE);
       
INSERT INTO date_range(date_min, date_max)
VALUES ('2000-01-01', '2023-12-31');                            -- Указать дату здесь

SELECT u.manager_id,  SUM(CASE WHEN result = 'yes' THEN 1 ELSE 0 END) * 100 / COUNT(result) AS conversion_percent
  FROM date_range AS dr, upsale AS u
 WHERE to_date(dt, 'DD.MM.YYYY') BETWEEN dr.date_min AND dr.date_max
 GROUP BY u.manager_id;

DROP TABLE IF EXISTS date_range;

 -----------------------------------------------------------------------------------------------------
 -- 3. Вывести конверсии тех менеджеров, у которых было больше 100 звонков за указанный период времени.
 -- Убрал ненужные CTE, убрал JOIN с таблицей менеджеров (менеджера с 0 звонков), сократил на 23 строки.
 
DROP TABLE IF EXISTS date_range;
  
CREATE TABLE date_range(date_min DATE,
                        date_max DATE);
       
INSERT INTO date_range(date_min, date_max)
VALUES ('2000-01-01', '2023-12-31');                            -- Указать дату здесь

SELECT u.manager_id,  SUM(CASE WHEN result = 'yes' THEN 1 ELSE 0 END) * 100 / COUNT(result) AS conversion_percent
  FROM date_range AS dr, upsale AS u
 WHERE to_date(dt, 'DD.MM.YYYY') BETWEEN dr.date_min AND dr.date_max
 GROUP BY u.manager_id
HAVING COUNT(call_id) > 100;                                    -- Количество звонков

DROP TABLE IF EXISTS date_range;
 
 ------------------------------------------------------------------------------------------------------------
 -- 4. Вывести офисы, отсортированные в порядке убывания средней конверсии менеджеров из офиса за всю историю.
 -- Убрал ненужные CTE, (FULL -> LEFT) JOIN, чтобы убрать менеджера с 0 звонков. Сократил на 13 строк.
 
WITH 
     managers_conversion AS
    (SELECT u.manager_id,  SUM(CASE WHEN result = 'yes' THEN 1 ELSE 0 END) * 100 / COUNT(result) AS conversion_percent
       FROM upsale AS u
      GROUP BY u.manager_id)
      
SELECT mn.office, ROUND(AVG(COALESCE(mc.conversion_percent, 0))) AS avg_conversion_percent
  FROM managers_conversion AS mc
       LEFT JOIN managers AS mn ON cast(mc.manager_id as NUMERIC) = mn.id
 GROUP BY mn.office
 ORDER BY avg_conversion_percent DESC;

-----------------------------------------------------------------------------------------------------------------------------
-- 5. Вывести минимальный порядковый номер звонка клиента с RESULT = Yes, перед которым был RESULT = No для каждого менеджера.
-- Исправил ошибку с ORDER BY, оконку сделал через алиас.
WITH
     result_table AS  
    (SELECT manager_id, to_date(dt, 'DD.MM.YYYY'), result,
	    ROW_NUMBER() OVER w AS call_number,
       	    LAG(result) OVER w AS previous_result
       FROM upsale
     WINDOW w as (PARTITION BY manager_id ORDER BY to_date(dt, 'DD.MM.YYYY')))
        
SELECT manager_id, call_number
  FROM result_table
 WHERE result = 'yes' AND previous_result = 'no';
 
 ----------------------------------------------------------------
 -- 6. Получить для каждого менеджера первое принятое предложение.
 -- Без изменений.
 
SELECT manager_id, MIN(to_date(dt, 'DD.MM.YYYY')) AS first_result
  FROM upsale
 WHERE result = 'yes'
 GROUP BY manager_id
 ORDER BY first_result;
 
 ---------------------------------------------------------------------------
 -- 7. Предложить запрос, показывающий ранее не использованные операторы SQL.
 -- Без изменений.
 
/* 
Суть запроса: в компании решили разыграть подарок в честь дня рождения компании. 
Среди тех, сотрудников, у кого в имени есть одна из букв lucky случайным образом выбирается победитель.
*/

WITH
     lucky_list AS
    (SELECT name, RANK() OVER (ORDER BY name) AS ticket_number
       FROM managers 
      WHERE LOWER(name) SIMILAR TO '%(l|u|c|k|y)%_'),
      
     winner_number AS
    (SELECT trunc(RANDOM() * MAX(ticket_number) + MIN(ticket_number)) AS winner_number
       FROM lucky_list)

SELECT name AS winner
  FROM lucky_list, winner_number
 WHERE ticket_number = winner_number;
 
------------------------------------------------------------------------------------------
-- 8. Предложить запрос, который покажет интересную или полезную информацию из этих данных.
-- Добавил еще данных за 3-5 месяцы, для демонстрации скрипта. Сам скрипт сократил на 20 строк, убрал ненужные сортировки и другие излишки.

/*
Суть запроса: определяем сотрудника месяца. На каждый месяц рассчитывается количество успешных upsalov’ов для каждого менеджера. 
Сотрудником месяца становится тот, кто набрал больше всего. 
В случае, если есть 2 и больше таких сотрудников (например, 3 человека сделали по 10 успешных upsal’ов каждый), 
они отсортированы по количеству продаж в столбце ранкинг. 
При желании можно вывести и количество сделок, и конверсию, тут только определяется победитель.
*/

INSERT INTO upsale(dt, manager_id, client_id, call_id, factor_id, result) VALUES

('01.03.2017',7,123,3,2,'yes'),
('03.04.2017',7,90,9,1,'yes'),
('02.03.2017',4,890,6,2,'no'),
('01.03.2017',3,67,2,1,'no'),
('04.03.2017',3,678,11,5,'yes'),
('03.05.2017',2,123,7,3,'yes'),
('03.04.2017',2,45,8,2,'no'),
('01.04.2017',1,45,1,1,'yes'),
('01.05.2017',1,45,4,4,'no'),
('04.04.2017',1,893,10,4,'yes');

WITH
     managers_conversion AS
    (SELECT manager_id,
     		SUM(CASE WHEN result = 'yes' THEN 1 ELSE 0 END) * 100 / COUNT(result) AS conversion_per_month,
     		SUM(CASE WHEN result = 'yes' THEN 1 ELSE 0 END) AS positive_per_month,
     		EXTRACT(MONTH FROM to_date(dt, 'DD.MM.YYYY')) AS month_num
       FROM upsale AS u
      GROUP BY manager_id, month_num),
           
      ranking_per_month AS
      (SELECT *, 
              RANK() OVER (PARTITION BY month_num ORDER BY conversion_per_month DESC) AS ranking,
              RANK() OVER (PARTITION BY month_num ORDER BY conversion_per_month DESC, positive_per_month DESC) AS ranking_final
       FROM managers_conversion)

        
SELECT manager_id, ranking_final, month_num
FROM ranking_per_month
WHERE ranking = 1;
